//// Warning: Do not modify!
//// This file (MiscellaneousReceiptFromHandheldPartCustomSearchViewEntity.cs) has been auto-generated by PALMS Entity Generation Tool on '12 October 2018' at '14:54:52'
//// If modification is required, consider 'partial class'.

using System;
using System.Collections;
using System.Collections.Generic;
using Technoforte.PALMS.Entities.CustomSearchViews.PrimaryKeys;
using Technoforte.PALMS.Entities.CustomSearchViews.UniqueKeys;

#pragma warning disable 1591

namespace Technoforte.PALMS.Entities.CustomSearchViews
{
	[Serializable]
	public partial class MiscellaneousReceiptFromHandheldPartCustomSearchViewEntity : Entity
	{
		#region Enums

		public new enum Field
		{
			WarehouseID
			, PrimaryCompanyID
			, CostBucketID
			, SupplierID
			, SupplierCode
			, SupplierName
			, PartID
			, WarehousePrimaryCompanyID
			, PartCostID
			, StorageUOMID
			, PartTypeID
			, PartID_PartCode
			, PartID_PartName
			, PartTypeID_PartTypeCode
			, PartTypeID_PartTypeName
			, IsScanningCompulsory
			, UnitPriceOfBillingUOMInLocalCurrency
			, TradeTermID
			, DefaultPurchaseBillingUOMID
			, DefaultPurchaseBillingUOMID_UOMCode
			, DefaultPurchaseBillingUOMID_UOMName
			, LocalCurrencyID
			, CurrencySymbol
			, StorageUOMID_UOMCode
			, StorageUOMID_UOMName
			, IsExpirySensitive
			, IsSerialNumberTracked
			, IsTrackedByManufactureDate
			, MinimumFreeShelfLife
			, ShelfLifeUnit
			, IsBatchSensitive
			, IsKit
			, IsFractionalQuantityAllowed
			, SerialNoValidationRule
			, IsWeightRequired
			
			, _FieldCount
		}

		public enum UniqueKey
		{
			Default
		}

		#endregion Enums

		#region Members

		public int? warehouseID;
		public int? primaryCompanyID;
		public int? costBucketID;
		public int? supplierID;
		public string supplierCode;
		public string supplierName;
		public int? partID;
		public int? warehousePrimaryCompanyID;
		public int? partCostID;
		public int? storageUOMID;
		public int? partTypeID;
		public string partID_PartCode;
		public string partID_PartName;
		public string partTypeID_PartTypeCode;
		public string partTypeID_PartTypeName;
		public bool? isScanningCompulsory;
		public decimal? unitPriceOfBillingUOMInLocalCurrency;
		public int? tradeTermID;
		public int? defaultPurchaseBillingUOMID;
		public string defaultPurchaseBillingUOMID_UOMCode;
		public string defaultPurchaseBillingUOMID_UOMName;
		public int? localCurrencyID;
		public string currencySymbol;
		public string storageUOMID_UOMCode;
		public string storageUOMID_UOMName;
		public bool? isExpirySensitive;
		public bool? isSerialNumberTracked;
		public bool? isTrackedByManufactureDate;
		public int? minimumFreeShelfLife;
		public int? shelfLifeUnit;
		public bool? isBatchSensitive;
		public bool? isKit;
		public bool? isFractionalQuantityAllowed;
		public int? serialNoValidationRule;
		public bool? isWeightRequired;

		#endregion Members

		#region Overriding / Public Members

		public override IEntityKey<Entity> GetPrimaryKey()
		{
			return (IEntityKey<Entity>)new MiscellaneousReceiptFromHandheldPartCustomSearchViewPrimaryKey()
			{
				supplierID = (int)supplierID
				, partCostID = (int)partCostID
				, primaryCompanyID = (int)primaryCompanyID
				, warehouseID = (int)warehouseID
				, costBucketID = (int)costBucketID
			};
		}

		public override IEntityKey<Entity> GetBlankPrimaryKey()
		{
			return (IEntityKey<Entity>)new MiscellaneousReceiptFromHandheldPartCustomSearchViewPrimaryKey();
		}

		public override IEntityKey<Entity> GetUniqueKey(string uniqueKey)
		{
			if (uniqueKey == "")
			{
				uniqueKey = "Default";
			}

			return (IEntityKey<Entity>)GetUniqueKey((UniqueKey)Enum.Parse(typeof(UniqueKey), uniqueKey, false));
		}

		public EntityKey<MiscellaneousReceiptFromHandheldPartCustomSearchViewEntity> GetUniqueKey(UniqueKey uniqueKey)
		{
			switch (uniqueKey)
			{
				case UniqueKey.Default:
					return new MiscellaneousReceiptFromHandheldPartCustomSearchViewUniqueKey()
					{
						supplierID = (int?)supplierID
						, partID = (int?)partID
						, primaryCompanyID = (int?)primaryCompanyID
						, warehouseID = (int?)warehouseID
						, costBucketID = (int?)costBucketID
						, warehousePrimaryCompanyID = (int?)warehousePrimaryCompanyID
					};
			}

			return null;
		}

		public override IEntityKey<Entity> GetBlankUniqueKey(string uniqueKey)
		{
			if (uniqueKey == "")
			{
				uniqueKey = "Default";
			}

			return (IEntityKey<Entity>)GetBlankUniqueKey((UniqueKey)Enum.Parse(typeof(UniqueKey), uniqueKey, false));
		}

        public EntityKey<MiscellaneousReceiptFromHandheldPartCustomSearchViewEntity> GetBlankUniqueKey(UniqueKey uniqueKey)
		{
			switch (uniqueKey)
			{
				case UniqueKey.Default:
					return new MiscellaneousReceiptFromHandheldPartCustomSearchViewUniqueKey();
			}

			return null;
		}

		public override int GetFieldCount()
		{
			return (int)Field._FieldCount;
		}

		public override object GetValue(int field)
		{
			return GetValue((Field)field);
		}

		public object GetValue(Field field)
		{
			switch (field)
			{
				case Field.WarehouseID:
					return warehouseID;
				case Field.PrimaryCompanyID:
					return primaryCompanyID;
				case Field.CostBucketID:
					return costBucketID;
				case Field.SupplierID:
					return supplierID;
				case Field.SupplierCode:
					return supplierCode;
				case Field.SupplierName:
					return supplierName;
				case Field.PartID:
					return partID;
				case Field.WarehousePrimaryCompanyID:
					return warehousePrimaryCompanyID;
				case Field.PartCostID:
					return partCostID;
				case Field.StorageUOMID:
					return storageUOMID;
				case Field.PartTypeID:
					return partTypeID;
				case Field.PartID_PartCode:
					return partID_PartCode;
				case Field.PartID_PartName:
					return partID_PartName;
				case Field.PartTypeID_PartTypeCode:
					return partTypeID_PartTypeCode;
				case Field.PartTypeID_PartTypeName:
					return partTypeID_PartTypeName;
				case Field.IsScanningCompulsory:
					return isScanningCompulsory;
				case Field.UnitPriceOfBillingUOMInLocalCurrency:
					return unitPriceOfBillingUOMInLocalCurrency;
				case Field.TradeTermID:
					return tradeTermID;
				case Field.DefaultPurchaseBillingUOMID:
					return defaultPurchaseBillingUOMID;
				case Field.DefaultPurchaseBillingUOMID_UOMCode:
					return defaultPurchaseBillingUOMID_UOMCode;
				case Field.DefaultPurchaseBillingUOMID_UOMName:
					return defaultPurchaseBillingUOMID_UOMName;
				case Field.LocalCurrencyID:
					return localCurrencyID;
				case Field.CurrencySymbol:
					return currencySymbol;
				case Field.StorageUOMID_UOMCode:
					return storageUOMID_UOMCode;
				case Field.StorageUOMID_UOMName:
					return storageUOMID_UOMName;
				case Field.IsExpirySensitive:
					return isExpirySensitive;
				case Field.IsSerialNumberTracked:
					return isSerialNumberTracked;
				case Field.IsTrackedByManufactureDate:
					return isTrackedByManufactureDate;
				case Field.MinimumFreeShelfLife:
					return minimumFreeShelfLife;
				case Field.ShelfLifeUnit:
					return shelfLifeUnit;
				case Field.IsBatchSensitive:
					return isBatchSensitive;
				case Field.IsKit:
					return isKit;
				case Field.IsFractionalQuantityAllowed:
					return isFractionalQuantityAllowed;
				case Field.SerialNoValidationRule:
					return serialNoValidationRule;
				case Field.IsWeightRequired:
					return isWeightRequired;
			}

			return null;
		}

		public override string GetFieldName(int field)
		{
			return GetFieldName((Field)field);
		}

		public string GetFieldName(Field field)
		{
			return field.ToString();
		}

		public override Type GetType(int field)
		{
			return GetType((Field)field);
		}

		public Type GetType(Field field)
		{
			switch (field)
			{
				case Field.WarehouseID:
					return typeof(int?);
				case Field.PrimaryCompanyID:
					return typeof(int?);
				case Field.CostBucketID:
					return typeof(int?);
				case Field.SupplierID:
					return typeof(int?);
				case Field.SupplierCode:
					return typeof(string);
				case Field.SupplierName:
					return typeof(string);
				case Field.PartID:
					return typeof(int?);
				case Field.WarehousePrimaryCompanyID:
					return typeof(int?);
				case Field.PartCostID:
					return typeof(int?);
				case Field.StorageUOMID:
					return typeof(int?);
				case Field.PartTypeID:
					return typeof(int?);
				case Field.PartID_PartCode:
					return typeof(string);
				case Field.PartID_PartName:
					return typeof(string);
				case Field.PartTypeID_PartTypeCode:
					return typeof(string);
				case Field.PartTypeID_PartTypeName:
					return typeof(string);
				case Field.IsScanningCompulsory:
					return typeof(bool?);
				case Field.UnitPriceOfBillingUOMInLocalCurrency:
					return typeof(decimal?);
				case Field.TradeTermID:
					return typeof(int?);
				case Field.DefaultPurchaseBillingUOMID:
					return typeof(int?);
				case Field.DefaultPurchaseBillingUOMID_UOMCode:
					return typeof(string);
				case Field.DefaultPurchaseBillingUOMID_UOMName:
					return typeof(string);
				case Field.LocalCurrencyID:
					return typeof(int?);
				case Field.CurrencySymbol:
					return typeof(string);
				case Field.StorageUOMID_UOMCode:
					return typeof(string);
				case Field.StorageUOMID_UOMName:
					return typeof(string);
				case Field.IsExpirySensitive:
					return typeof(bool?);
				case Field.IsSerialNumberTracked:
					return typeof(bool?);
				case Field.IsTrackedByManufactureDate:
					return typeof(bool?);
				case Field.MinimumFreeShelfLife:
					return typeof(int?);
				case Field.ShelfLifeUnit:
					return typeof(int?);
				case Field.IsBatchSensitive:
					return typeof(bool?);
				case Field.IsKit:
					return typeof(bool?);
				case Field.IsFractionalQuantityAllowed:
					return typeof(bool?);
				case Field.SerialNoValidationRule:
					return typeof(int?);
				case Field.IsWeightRequired:
					return typeof(bool?);

			}
			return null;
		}

		public override void SetValue(int field, bool? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, bool? value)
		{
			switch (field)
			{
				case Field.IsScanningCompulsory:
					isScanningCompulsory = value;
					break;
				case Field.IsExpirySensitive:
					isExpirySensitive = value;
					break;
				case Field.IsSerialNumberTracked:
					isSerialNumberTracked = value;
					break;
				case Field.IsTrackedByManufactureDate:
					isTrackedByManufactureDate = value;
					break;
				case Field.IsBatchSensitive:
					isBatchSensitive = value;
					break;
				case Field.IsKit:
					isKit = value;
					break;
				case Field.IsFractionalQuantityAllowed:
					isFractionalQuantityAllowed = value;
					break;
				case Field.IsWeightRequired:
					isWeightRequired = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, long? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, long? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, int? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, int? value)
		{
			switch (field)
			{
				case Field.WarehouseID:
					warehouseID = value;
					break;
				case Field.PrimaryCompanyID:
					primaryCompanyID = value;
					break;
				case Field.CostBucketID:
					costBucketID = value;
					break;
				case Field.SupplierID:
					supplierID = value;
					break;
				case Field.PartID:
					partID = value;
					break;
				case Field.WarehousePrimaryCompanyID:
					warehousePrimaryCompanyID = value;
					break;
				case Field.PartCostID:
					partCostID = value;
					break;
				case Field.StorageUOMID:
					storageUOMID = value;
					break;
				case Field.PartTypeID:
					partTypeID = value;
					break;
				case Field.TradeTermID:
					tradeTermID = value;
					break;
				case Field.DefaultPurchaseBillingUOMID:
					defaultPurchaseBillingUOMID = value;
					break;
				case Field.LocalCurrencyID:
					localCurrencyID = value;
					break;
				case Field.MinimumFreeShelfLife:
					minimumFreeShelfLife = value;
					break;
				case Field.ShelfLifeUnit:
					shelfLifeUnit = value;
					break;
				case Field.SerialNoValidationRule:
					serialNoValidationRule = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, short? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, short? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, byte? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, byte? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, BitArray value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, BitArray value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, float? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, float? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, double? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, double? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, decimal? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, decimal? value)
		{
			switch (field)
			{
				case Field.UnitPriceOfBillingUOMInLocalCurrency:
					unitPriceOfBillingUOMInLocalCurrency = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, char? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, char? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, string value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, string value)
		{
			switch (field)
			{
				case Field.SupplierCode:
					supplierCode = value;
					break;
				case Field.SupplierName:
					supplierName = value;
					break;
				case Field.PartID_PartCode:
					partID_PartCode = value;
					break;
				case Field.PartID_PartName:
					partID_PartName = value;
					break;
				case Field.PartTypeID_PartTypeCode:
					partTypeID_PartTypeCode = value;
					break;
				case Field.PartTypeID_PartTypeName:
					partTypeID_PartTypeName = value;
					break;
				case Field.DefaultPurchaseBillingUOMID_UOMCode:
					defaultPurchaseBillingUOMID_UOMCode = value;
					break;
				case Field.DefaultPurchaseBillingUOMID_UOMName:
					defaultPurchaseBillingUOMID_UOMName = value;
					break;
				case Field.CurrencySymbol:
					currencySymbol = value;
					break;
				case Field.StorageUOMID_UOMCode:
					storageUOMID_UOMCode = value;
					break;
				case Field.StorageUOMID_UOMName:
					storageUOMID_UOMName = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, DateTime? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, DateTime? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, Guid? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, Guid? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override bool IsIdentity(int field)
		{
			return false;
		}

		#endregion Overriding / Public Members
	}
}
