//// Warning: Do not modify!
//// This file (PackForHandheldCustomSearchViewEntity.cs) has been auto-generated by PALMS Entity Generation Tool on '05 June 2013' at '15:47:24'
//// If modification is required, consider 'partial class'.

using System;
using System.Collections;
using System.Collections.Generic;
using Technoforte.PALMS.Entities.CustomSearchViews.PrimaryKeys;
using Technoforte.PALMS.Entities.CustomSearchViews.UniqueKeys;

#pragma warning disable 1591

namespace Technoforte.PALMS.Entities.CustomSearchViews
{
	[Serializable]
	public partial class PackForHandheldCustomSearchViewEntity : Entity
	{
		#region Enums

		public new enum Field
		{
			PrimaryCompanyID
			, WarehouseID
			, CostBucketID
			, WarehousePrimaryCompanyID
			, PackID
			, PackNo
			, OriginalPackNo
			, PackTypeID
			, OuterPackID
			, OuterMostPackID
			, PackOrigin
			, PackDestination
			, IsActive
			, StandardPackID
			, Length
			, Width
			, Height
			, Weight
			, PackValue
			, CaseMarkLabel
			, ShippingInformationID
			, HSCodes
			, SalesOrderNos
			, CountryOfOrigins
			, ReferenceNo
			, PackStatusID
			, PackingMode
			, PackTypeID_PackTypeCode
			, PackTypeID_PackTypeName
			, PackTypeID_AllowMixedShippingInfoData
			, PackTypeID_IsTransportPack
			, PackStatusID_PalmsStatusCode
			, PackStatusID_PalmsStatusType
			, CreatedBy_PalmsUserLoginName
			, ModifiedBy_PalmsUserLoginName
			, CustomerID
			, CustomerName
			, CustomerCode
			, CustomerShipToCode
			, CustomerShipToID
			, CustomerBillToCode
			, CustomerBillToID
			, ShippingModeID
			, ShippingModeCode
			, ShippingModeName
			, TradeTermID
			, TradeTermCode
			, TradeTermName
			, FreightForwarderID
			, FreightForwarderCode
			, FreightForwarderName
			
			, _FieldCount
		}

		public enum UniqueKey
		{
			Default
		}

		#endregion Enums

		#region Members

		public int? primaryCompanyID;
		public int? warehouseID;
		public int? costBucketID;
		public int? warehousePrimaryCompanyID;
		public int? packID;
		public string packNo;
		public string originalPackNo;
		public int? packTypeID;
		public int? outerPackID;
		public int? outerMostPackID;
		public int? packOrigin;
		public int? packDestination;
		public bool? isActive;
		public int? standardPackID;
		public decimal? length;
		public decimal? width;
		public decimal? height;
		public decimal? weight;
		public decimal? packValue;
		public string caseMarkLabel;
		public int? shippingInformationID;
		public string hSCodes;
		public string salesOrderNos;
		public string countryOfOrigins;
		public string referenceNo;
		public int? packStatusID;
		public int? packingMode;
		public string packTypeID_PackTypeCode;
		public string packTypeID_PackTypeName;
		public bool? packTypeID_AllowMixedShippingInfoData;
		public bool? packTypeID_IsTransportPack;
		public string packStatusID_PalmsStatusCode;
		public string packStatusID_PalmsStatusType;
		public string createdBy_PalmsUserLoginName;
		public string modifiedBy_PalmsUserLoginName;
		public int? customerID;
		public string customerName;
		public string customerCode;
		public string customerShipToCode;
		public int? customerShipToID;
		public string customerBillToCode;
		public int? customerBillToID;
		public int? shippingModeID;
		public string shippingModeCode;
		public string shippingModeName;
		public int? tradeTermID;
		public string tradeTermCode;
		public string tradeTermName;
		public int? freightForwarderID;
		public string freightForwarderCode;
		public string freightForwarderName;

		#endregion Members

		#region Overriding / Public Members

		public override IEntityKey<Entity> GetPrimaryKey()
		{
			return (IEntityKey<Entity>)new PackForHandheldCustomSearchViewPrimaryKey()
			{
				primaryCompanyID = (int)primaryCompanyID
				, warehouseID = (int)warehouseID
				, costBucketID = (int)costBucketID
				, packID = (int)packID
			};
		}

		public override IEntityKey<Entity> GetBlankPrimaryKey()
		{
			return (IEntityKey<Entity>)new PackForHandheldCustomSearchViewPrimaryKey();
		}

		public override IEntityKey<Entity> GetUniqueKey(string uniqueKey)
		{
			if (uniqueKey == "")
			{
				uniqueKey = "Default";
			}

			return (IEntityKey<Entity>)GetUniqueKey((UniqueKey)Enum.Parse(typeof(UniqueKey), uniqueKey, false));
		}

		public EntityKey<PackForHandheldCustomSearchViewEntity> GetUniqueKey(UniqueKey uniqueKey)
		{
			switch (uniqueKey)
			{
				case UniqueKey.Default:
					return new PackForHandheldCustomSearchViewUniqueKey()
					{
						primaryCompanyID = (int?)primaryCompanyID
						, warehouseID = (int?)warehouseID
						, costBucketID = (int?)costBucketID
						, packID = (int?)packID
					};
			}

			return null;
		}

		public override IEntityKey<Entity> GetBlankUniqueKey(string uniqueKey)
		{
			if (uniqueKey == "")
			{
				uniqueKey = "Default";
			}

			return (IEntityKey<Entity>)GetBlankUniqueKey((UniqueKey)Enum.Parse(typeof(UniqueKey), uniqueKey, false));
		}

		public EntityKey<PackForHandheldCustomSearchViewEntity> GetBlankUniqueKey(UniqueKey uniqueKey)
		{
			switch (uniqueKey)
			{
				case UniqueKey.Default:
					return new PackForHandheldCustomSearchViewUniqueKey();
			}

			return null;
		}

		public override int GetFieldCount()
		{
			return (int)Field._FieldCount;
		}

		public override object GetValue(int field)
		{
			return GetValue((Field)field);
		}

		public object GetValue(Field field)
		{
			switch (field)
			{
				case Field.PrimaryCompanyID:
					return primaryCompanyID;
				case Field.WarehouseID:
					return warehouseID;
				case Field.CostBucketID:
					return costBucketID;
				case Field.WarehousePrimaryCompanyID:
					return warehousePrimaryCompanyID;
				case Field.PackID:
					return packID;
				case Field.PackNo:
					return packNo;
				case Field.OriginalPackNo:
					return originalPackNo;
				case Field.PackTypeID:
					return packTypeID;
				case Field.OuterPackID:
					return outerPackID;
				case Field.OuterMostPackID:
					return outerMostPackID;
				case Field.PackOrigin:
					return packOrigin;
				case Field.PackDestination:
					return packDestination;
				case Field.IsActive:
					return isActive;
				case Field.StandardPackID:
					return standardPackID;
				case Field.Length:
					return length;
				case Field.Width:
					return width;
				case Field.Height:
					return height;
				case Field.Weight:
					return weight;
				case Field.PackValue:
					return packValue;
				case Field.CaseMarkLabel:
					return caseMarkLabel;
				case Field.ShippingInformationID:
					return shippingInformationID;
				case Field.HSCodes:
					return hSCodes;
				case Field.SalesOrderNos:
					return salesOrderNos;
				case Field.CountryOfOrigins:
					return countryOfOrigins;
				case Field.ReferenceNo:
					return referenceNo;
				case Field.PackStatusID:
					return packStatusID;
				case Field.PackingMode:
					return packingMode;
				case Field.PackTypeID_PackTypeCode:
					return packTypeID_PackTypeCode;
				case Field.PackTypeID_PackTypeName:
					return packTypeID_PackTypeName;
				case Field.PackTypeID_AllowMixedShippingInfoData:
					return packTypeID_AllowMixedShippingInfoData;
				case Field.PackTypeID_IsTransportPack:
					return packTypeID_IsTransportPack;
				case Field.PackStatusID_PalmsStatusCode:
					return packStatusID_PalmsStatusCode;
				case Field.PackStatusID_PalmsStatusType:
					return packStatusID_PalmsStatusType;
				case Field.CreatedBy_PalmsUserLoginName:
					return createdBy_PalmsUserLoginName;
				case Field.ModifiedBy_PalmsUserLoginName:
					return modifiedBy_PalmsUserLoginName;
				case Field.CustomerID:
					return customerID;
				case Field.CustomerName:
					return customerName;
				case Field.CustomerCode:
					return customerCode;
				case Field.CustomerShipToCode:
					return customerShipToCode;
				case Field.CustomerShipToID:
					return customerShipToID;
				case Field.CustomerBillToCode:
					return customerBillToCode;
				case Field.CustomerBillToID:
					return customerBillToID;
				case Field.ShippingModeID:
					return shippingModeID;
				case Field.ShippingModeCode:
					return shippingModeCode;
				case Field.ShippingModeName:
					return shippingModeName;
				case Field.TradeTermID:
					return tradeTermID;
				case Field.TradeTermCode:
					return tradeTermCode;
				case Field.TradeTermName:
					return tradeTermName;
				case Field.FreightForwarderID:
					return freightForwarderID;
				case Field.FreightForwarderCode:
					return freightForwarderCode;
				case Field.FreightForwarderName:
					return freightForwarderName;
			}

			return null;
		}

		public override string GetFieldName(int field)
		{
			return GetFieldName((Field)field);
		}

		public string GetFieldName(Field field)
		{
			return field.ToString();
		}

		public override Type GetType(int field)
		{
			return GetType((Field)field);
		}

		public Type GetType(Field field)
		{
			switch (field)
			{
				case Field.PrimaryCompanyID:
					return typeof(int?);
				case Field.WarehouseID:
					return typeof(int?);
				case Field.CostBucketID:
					return typeof(int?);
				case Field.WarehousePrimaryCompanyID:
					return typeof(int?);
				case Field.PackID:
					return typeof(int?);
				case Field.PackNo:
					return typeof(string);
				case Field.OriginalPackNo:
					return typeof(string);
				case Field.PackTypeID:
					return typeof(int?);
				case Field.OuterPackID:
					return typeof(int?);
				case Field.OuterMostPackID:
					return typeof(int?);
				case Field.PackOrigin:
					return typeof(int?);
				case Field.PackDestination:
					return typeof(int?);
				case Field.IsActive:
					return typeof(bool?);
				case Field.StandardPackID:
					return typeof(int?);
				case Field.Length:
					return typeof(decimal?);
				case Field.Width:
					return typeof(decimal?);
				case Field.Height:
					return typeof(decimal?);
				case Field.Weight:
					return typeof(decimal?);
				case Field.PackValue:
					return typeof(decimal?);
				case Field.CaseMarkLabel:
					return typeof(string);
				case Field.ShippingInformationID:
					return typeof(int?);
				case Field.HSCodes:
					return typeof(string);
				case Field.SalesOrderNos:
					return typeof(string);
				case Field.CountryOfOrigins:
					return typeof(string);
				case Field.ReferenceNo:
					return typeof(string);
				case Field.PackStatusID:
					return typeof(int?);
				case Field.PackingMode:
					return typeof(int?);
				case Field.PackTypeID_PackTypeCode:
					return typeof(string);
				case Field.PackTypeID_PackTypeName:
					return typeof(string);
				case Field.PackTypeID_AllowMixedShippingInfoData:
					return typeof(bool?);
				case Field.PackTypeID_IsTransportPack:
					return typeof(bool?);
				case Field.PackStatusID_PalmsStatusCode:
					return typeof(string);
				case Field.PackStatusID_PalmsStatusType:
					return typeof(string);
				case Field.CreatedBy_PalmsUserLoginName:
					return typeof(string);
				case Field.ModifiedBy_PalmsUserLoginName:
					return typeof(string);
				case Field.CustomerID:
					return typeof(int?);
				case Field.CustomerName:
					return typeof(string);
				case Field.CustomerCode:
					return typeof(string);
				case Field.CustomerShipToCode:
					return typeof(string);
				case Field.CustomerShipToID:
					return typeof(int?);
				case Field.CustomerBillToCode:
					return typeof(string);
				case Field.CustomerBillToID:
					return typeof(int?);
				case Field.ShippingModeID:
					return typeof(int?);
				case Field.ShippingModeCode:
					return typeof(string);
				case Field.ShippingModeName:
					return typeof(string);
				case Field.TradeTermID:
					return typeof(int?);
				case Field.TradeTermCode:
					return typeof(string);
				case Field.TradeTermName:
					return typeof(string);
				case Field.FreightForwarderID:
					return typeof(int?);
				case Field.FreightForwarderCode:
					return typeof(string);
				case Field.FreightForwarderName:
					return typeof(string);

			}
			return null;
		}

		public override void SetValue(int field, bool? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, bool? value)
		{
			switch (field)
			{
				case Field.IsActive:
					isActive = value;
					break;
				case Field.PackTypeID_AllowMixedShippingInfoData:
					packTypeID_AllowMixedShippingInfoData = value;
					break;
				case Field.PackTypeID_IsTransportPack:
					packTypeID_IsTransportPack = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, long? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, long? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, int? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, int? value)
		{
			switch (field)
			{
				case Field.PrimaryCompanyID:
					primaryCompanyID = value;
					break;
				case Field.WarehouseID:
					warehouseID = value;
					break;
				case Field.CostBucketID:
					costBucketID = value;
					break;
				case Field.WarehousePrimaryCompanyID:
					warehousePrimaryCompanyID = value;
					break;
				case Field.PackID:
					packID = value;
					break;
				case Field.PackTypeID:
					packTypeID = value;
					break;
				case Field.OuterPackID:
					outerPackID = value;
					break;
				case Field.OuterMostPackID:
					outerMostPackID = value;
					break;
				case Field.PackOrigin:
					packOrigin = value;
					break;
				case Field.PackDestination:
					packDestination = value;
					break;
				case Field.StandardPackID:
					standardPackID = value;
					break;
				case Field.ShippingInformationID:
					shippingInformationID = value;
					break;
				case Field.PackStatusID:
					packStatusID = value;
					break;
				case Field.PackingMode:
					packingMode = value;
					break;
				case Field.CustomerID:
					customerID = value;
					break;
				case Field.CustomerShipToID:
					customerShipToID = value;
					break;
				case Field.CustomerBillToID:
					customerBillToID = value;
					break;
				case Field.ShippingModeID:
					shippingModeID = value;
					break;
				case Field.TradeTermID:
					tradeTermID = value;
					break;
				case Field.FreightForwarderID:
					freightForwarderID = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, short? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, short? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, byte? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, byte? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, BitArray value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, BitArray value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, float? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, float? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, double? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, double? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, decimal? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, decimal? value)
		{
			switch (field)
			{
				case Field.Length:
					length = value;
					break;
				case Field.Width:
					width = value;
					break;
				case Field.Height:
					height = value;
					break;
				case Field.Weight:
					weight = value;
					break;
				case Field.PackValue:
					packValue = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, char? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, char? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, string value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, string value)
		{
			switch (field)
			{
				case Field.PackNo:
					packNo = value;
					break;
				case Field.OriginalPackNo:
					originalPackNo = value;
					break;
				case Field.CaseMarkLabel:
					caseMarkLabel = value;
					break;
				case Field.HSCodes:
					hSCodes = value;
					break;
				case Field.SalesOrderNos:
					salesOrderNos = value;
					break;
				case Field.CountryOfOrigins:
					countryOfOrigins = value;
					break;
				case Field.ReferenceNo:
					referenceNo = value;
					break;
				case Field.PackTypeID_PackTypeCode:
					packTypeID_PackTypeCode = value;
					break;
				case Field.PackTypeID_PackTypeName:
					packTypeID_PackTypeName = value;
					break;
				case Field.PackStatusID_PalmsStatusCode:
					packStatusID_PalmsStatusCode = value;
					break;
				case Field.PackStatusID_PalmsStatusType:
					packStatusID_PalmsStatusType = value;
					break;
				case Field.CreatedBy_PalmsUserLoginName:
					createdBy_PalmsUserLoginName = value;
					break;
				case Field.ModifiedBy_PalmsUserLoginName:
					modifiedBy_PalmsUserLoginName = value;
					break;
				case Field.CustomerName:
					customerName = value;
					break;
				case Field.CustomerCode:
					customerCode = value;
					break;
				case Field.CustomerShipToCode:
					customerShipToCode = value;
					break;
				case Field.CustomerBillToCode:
					customerBillToCode = value;
					break;
				case Field.ShippingModeCode:
					shippingModeCode = value;
					break;
				case Field.ShippingModeName:
					shippingModeName = value;
					break;
				case Field.TradeTermCode:
					tradeTermCode = value;
					break;
				case Field.TradeTermName:
					tradeTermName = value;
					break;
				case Field.FreightForwarderCode:
					freightForwarderCode = value;
					break;
				case Field.FreightForwarderName:
					freightForwarderName = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, DateTime? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, DateTime? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, Guid? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, Guid? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override bool IsIdentity(int field)
		{
			return false;
		}

		#endregion Overriding / Public Members
	}
}
