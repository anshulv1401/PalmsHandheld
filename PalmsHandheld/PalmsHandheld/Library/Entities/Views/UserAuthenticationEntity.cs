//// Warning: Do not modify!
//// This file (UserAuthenticationEntity.cs) has been auto-generated by PALMS Entity Generation Tool on '16 November 2011' at '16:11:39'
//// If modification is required, consider 'partial class'.

using System;
using System.Collections;
using System.Collections.Generic;
using Technoforte.PALMS.Entities.Views.PrimaryKeys;
using Technoforte.PALMS.Entities.Views.UniqueKeys;

#pragma warning disable 1591

namespace Technoforte.PALMS.Entities.Views
{
	[Serializable]
	public partial class UserAuthenticationEntity : Entity
	{
		#region Enums

		public new enum Field
		{
			PalmsUIElementID
			, PalmsFeatureID
			, PalmsFeatureCode
			, PalmsFeatureName
			, PalmsUIElementName
			, PalmsUIElementCode
			, PalmsUIElementPath
			, UpperPalmsUIElementID
			, UpperPalmsUIElementID_PalmsUIElementPath
			, IsScreen
			, LinkedPalmsServiceMethodID
			, PalmsServiceActionName
			, PalmsServiceMethodName
			, PalmsServiceID
			, PalmsUserID
			, PalmsUserLoginName
			, Password
			, UserType
			, WarehouseID
			, PrimaryCompanyID
			, CustomerID
			, SupplierID
			, Version
			, IsTimezoneComparisonRequired
            , TimeZone

			, _FieldCount
		}

		public enum UniqueKey
		{
			Default
		}

		#endregion Enums

		#region Members

		public int? palmsUIElementID;
		public int? palmsFeatureID;
		public string palmsFeatureCode;
		public string palmsFeatureName;
		public string palmsUIElementName;
		public string palmsUIElementCode;
		public string palmsUIElementPath;
		public int? upperPalmsUIElementID;
		public string upperPalmsUIElementID_PalmsUIElementPath;
		public bool? isScreen;
		public int? linkedPalmsServiceMethodID;
		public string palmsServiceActionName;
		public string palmsServiceMethodName;
		public int? palmsServiceID;
		public int? palmsUserID;
		public string palmsUserLoginName;
		public string password;
		public int? userType;
		public int? warehouseID;
		public int? primaryCompanyID;
		public int? customerID;
		public int? supplierID;
		public string version;
        public bool? isTimezoneComparisonRequired;
        public string timeZone;

		#endregion Members

		#region Overriding / Public Members

		public override IEntityKey<Entity> GetPrimaryKey()
		{
			return (IEntityKey<Entity>) new UserAuthenticationPrimaryKey()
			{
				palmsUIElementPath = (string)palmsUIElementPath
			};
		}

		public override IEntityKey<Entity> GetBlankPrimaryKey()
		{
			return (IEntityKey<Entity>)new UserAuthenticationPrimaryKey();
		}

		public override IEntityKey<Entity> GetUniqueKey(string uniqueKey)
		{
			if (uniqueKey == "" && uniqueKey == "Default")
			{
				uniqueKey = "Default";
			}

            return (IEntityKey<Entity>) new UserAuthenticationUniqueKey()
					{
						palmsUIElementPath = (string)palmsUIElementPath
					};			
		}

		public EntityKey<UserAuthenticationEntity> GetUniqueKey(UniqueKey uniqueKey)
		{
			switch (uniqueKey)
			{
				case UniqueKey.Default:
					return new UserAuthenticationUniqueKey()
					{
						palmsUIElementPath = (string)palmsUIElementPath
					};
			}

			return null;
		}

		public override IEntityKey<Entity> GetBlankUniqueKey(string uniqueKey)
		{
			if (uniqueKey == "" && uniqueKey == "Default")
			{
                return (IEntityKey<Entity>)new UserAuthenticationUniqueKey();
			}
            return null;
		}

		public EntityKey<UserAuthenticationEntity> GetBlankUniqueKey(UniqueKey uniqueKey)
		{
			switch (uniqueKey)
			{
				case UniqueKey.Default:
					return new UserAuthenticationUniqueKey();
			}

			return null;
		}

		public override int GetFieldCount()
		{
			return (int)Field._FieldCount;
		}

		public override object GetValue(int field)
		{
			return GetValue((Field)field);
		}

		public object GetValue(Field field)
		{
			switch (field)
			{
				case Field.PalmsUIElementID:
					return palmsUIElementID;
				case Field.PalmsFeatureID:
					return palmsFeatureID;
				case Field.PalmsFeatureCode:
					return palmsFeatureCode;
				case Field.PalmsFeatureName:
					return palmsFeatureName;
				case Field.PalmsUIElementName:
					return palmsUIElementName;
				case Field.PalmsUIElementCode:
					return palmsUIElementCode;
				case Field.PalmsUIElementPath:
					return palmsUIElementPath;
				case Field.UpperPalmsUIElementID:
					return upperPalmsUIElementID;
				case Field.UpperPalmsUIElementID_PalmsUIElementPath:
					return upperPalmsUIElementID_PalmsUIElementPath;
				case Field.IsScreen:
					return isScreen;
				case Field.LinkedPalmsServiceMethodID:
					return linkedPalmsServiceMethodID;
				case Field.PalmsServiceActionName:
					return palmsServiceActionName;
				case Field.PalmsServiceMethodName:
					return palmsServiceMethodName;
				case Field.PalmsServiceID:
					return palmsServiceID;
				case Field.PalmsUserID:
					return palmsUserID;
				case Field.PalmsUserLoginName:
					return palmsUserLoginName;
				case Field.Password:
					return password;
				case Field.UserType:
					return userType;
				case Field.WarehouseID:
					return warehouseID;
				case Field.PrimaryCompanyID:
					return primaryCompanyID;
				case Field.CustomerID:
					return customerID;
				case Field.SupplierID:
					return supplierID;
				case Field.Version:
					return version;
                case Field.IsTimezoneComparisonRequired:
                    return isTimezoneComparisonRequired;
                case Field.TimeZone:
                    return timeZone;
			}

			return null;
		}

		public override string GetFieldName(int field)
		{
			return GetFieldName((Field)field);
		}

		public string GetFieldName(Field field)
		{
			return field.ToString();
		}

		public override Type GetType(int field)
		{
			return GetType((Field)field);
		}

		public Type GetType(Field field)
		{
			switch (field)
			{
				case Field.PalmsUIElementID:
					return typeof(int?);
				case Field.PalmsFeatureID:
					return typeof(int?);
				case Field.PalmsFeatureCode:
					return typeof(string);
				case Field.PalmsFeatureName:
					return typeof(string);
				case Field.PalmsUIElementName:
					return typeof(string);
				case Field.PalmsUIElementCode:
					return typeof(string);
				case Field.PalmsUIElementPath:
					return typeof(string);
				case Field.UpperPalmsUIElementID:
					return typeof(int?);
				case Field.UpperPalmsUIElementID_PalmsUIElementPath:
					return typeof(string);
				case Field.IsScreen:
					return typeof(bool?);
				case Field.LinkedPalmsServiceMethodID:
					return typeof(int?);
				case Field.PalmsServiceActionName:
					return typeof(string);
				case Field.PalmsServiceMethodName:
					return typeof(string);
				case Field.PalmsServiceID:
					return typeof(int?);
				case Field.PalmsUserID:
					return typeof(int?);
				case Field.PalmsUserLoginName:
					return typeof(string);
				case Field.Password:
					return typeof(string);
				case Field.UserType:
					return typeof(int?);
				case Field.WarehouseID:
					return typeof(int?);
				case Field.PrimaryCompanyID:
					return typeof(int?);
				case Field.CustomerID:
					return typeof(int?);
				case Field.SupplierID:
					return typeof(int?);
				case Field.Version:
					return typeof(string);
                case Field.IsTimezoneComparisonRequired:
                    return typeof(bool?);
                case Field.TimeZone:
                    return typeof(string);

			}
			return null;
		}

		public override void SetValue(int field, bool? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, bool? value)
		{
			switch (field)
			{
				case Field.IsScreen:
					isScreen = value;
					break;
                case Field.IsTimezoneComparisonRequired:
                    isTimezoneComparisonRequired = value;
                    break;
				default:
					break;
			}
		}

		public override void SetValue(int field, long? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, long? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, int? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, int? value)
		{
			switch (field)
			{
				case Field.PalmsUIElementID:
					palmsUIElementID = value;
					break;
				case Field.PalmsFeatureID:
					palmsFeatureID = value;
					break;
				case Field.UpperPalmsUIElementID:
					upperPalmsUIElementID = value;
					break;
				case Field.LinkedPalmsServiceMethodID:
					linkedPalmsServiceMethodID = value;
					break;
				case Field.PalmsServiceID:
					palmsServiceID = value;
					break;
				case Field.PalmsUserID:
					palmsUserID = value;
					break;
				case Field.UserType:
					userType = value;
					break;
				case Field.WarehouseID:
					warehouseID = value;
					break;
				case Field.PrimaryCompanyID:
					primaryCompanyID = value;
					break;
				case Field.CustomerID:
					customerID = value;
					break;
				case Field.SupplierID:
					supplierID = value;
					break;
				default:
					break;
			}
		}

		public override void SetValue(int field, short? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, short? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, byte? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, byte? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, BitArray value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, BitArray value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, float? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, float? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, double? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, double? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, decimal? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, decimal? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, char? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, char? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, string value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, string value)
		{
			switch (field)
			{
				case Field.PalmsFeatureCode:
					palmsFeatureCode = value;
					break;
				case Field.PalmsFeatureName:
					palmsFeatureName = value;
					break;
				case Field.PalmsUIElementName:
					palmsUIElementName = value;
					break;
				case Field.PalmsUIElementCode:
					palmsUIElementCode = value;
					break;
				case Field.PalmsUIElementPath:
					palmsUIElementPath = value;
					break;
				case Field.UpperPalmsUIElementID_PalmsUIElementPath:
					upperPalmsUIElementID_PalmsUIElementPath = value;
					break;
				case Field.PalmsServiceActionName:
					palmsServiceActionName = value;
					break;
				case Field.PalmsServiceMethodName:
					palmsServiceMethodName = value;
					break;
				case Field.PalmsUserLoginName:
					palmsUserLoginName = value;
					break;
				case Field.Password:
					password = value;
					break;
				case Field.Version:
					version = value;
					break;
                case Field.TimeZone:
                    timeZone = value;
                    break;
				default:
					break;
			}
		}

		public override void SetValue(int field, DateTime? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, DateTime? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override void SetValue(int field, Guid? value)
		{
			SetValue((Field)field, value);
		}

		public void SetValue(Field field, Guid? value)
		{
			switch (field)
			{
				default:
					break;
			}
		}

		public override bool IsIdentity(int field)
		{
			return false;
		}

		#endregion Overriding / Public Members
	}
}
